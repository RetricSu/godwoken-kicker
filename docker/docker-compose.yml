# {workspaceDir}/docker/docker-compose.yml
version: '3.8'

services:
  postgres:
    image: postgres:alpine
    ports: 
      - 5432:5432
    environment:
      POSTGRES_USER: user
      POSTGRES_DB: lumos
      POSTGRES_PASSWORD: password
    volumes:
      - ../cache/activity/postgres-data:/var/lib/postgresql/data
      # copy the sql script to create tables
      - ../docker/postgres/web3-indexer-sql/create_tables.sql:/docker-entrypoint-initdb.d/create_tables.sql
    
  redis:
    image: redis:bullseye
    user: root:root
    ports: 
      - 6379:6379
    volumes:
      - ../cache/activity/redis-data:/data

  ckb:
    image: nervos/ckb:v0.101.4
    ports:
      - 8114:8114   # rpc
      - 8115:8115   # p2p network
      - 18114:18114 # rpc.ws_listen_address
    volumes:
      - ./layer1/ckb:/var/lib/ckb
    command: [ "run", "-C", "/var/lib/ckb" ]

  ckb-miner:
    image: nervos/ckb:v0.101.4
    volumes:
      - ./layer1/ckb:/var/lib/ckb
    command: [ "miner", "-C", "/var/lib/ckb" ]

  # "nervos/ckb" image have no http clients to do health check for CKB.
  # This short-term service act as a workaround to do health check.
  check-ckb-started-successfully:
    image: nervos/godwoken-prebuilds:v0.10.2
    volumes:
      - ./layer1/ckb:/var/lib/ckb
    entrypoint: /var/lib/ckb/check-ckb-started-successfully.sh

  ckb-indexer:
    image: nervos/ckb-indexer:0.3.2
    environment:
      CKB_RPC: http://ckb:8114
    ports:
      - "8116:8116"
    ### It is not a good idea to volume ckb-index data when test.
    # volumes:
    #   - ./ckb-indexer:/var/lib/ckb-indexer
    command: [ "-c", "http://ckb:8114", "-l", "0.0.0.0:8116", "-s", "/var/lib/ckb-indexer/" ]
    depends_on:
      check-ckb-started-successfully:
        condition: service_completed_successfully

# todo: fix the network issue when connecting two peers
  ckb2:
    profiles: ["multi_ckb_nodes"]
    build:
      context: layer1/ckb2
      args: 
        DOCKER_PREBUILD_IMAGE: "${DOCKER_PREBUILD_IMAGE_NAME}:${DOCKER_PREBUILD_IMAGE_TAG}"
    ports:
    - 28117:28117 # rpc.ws_listen_address
    - 8117:8117
    - 8118:8118   # 8118 is not using for now, but we may need it when extend kicker in the future
    volumes:
    - ../:/code       
    - ../cache/activity/ckb2-chain-data:/usr/local/ckb2-chain-data
    environment:
      # env of layer 1:
      CKB_CHAIN: dev
      BA_ARG: 0xc48a45e11c66b2c8b5c61f6036486ad4d9d2fd29
      BA_CODE_HASH: 0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8
      BA_HASH_TYPE: type
      BA_MESSAGE: 0x1234
      ENABLE_MULTI_CKB_NODES: ${ENABLE_MULTI_CKB_NODES}
    deploy:
      resources:
        limits:
          cpus: '0.5'

  # todo: fix the network issue when connecting two peers
  ckb3:
    profiles: ["multi_ckb_nodes"]
    build:
      context: layer1/ckb3
      args: 
        DOCKER_PREBUILD_IMAGE: "${DOCKER_PREBUILD_IMAGE_NAME}:${DOCKER_PREBUILD_IMAGE_TAG}"
    ports:
    - 26117:26117 # rpc.ws_listen_address
    - 6117:6117
    - 6118:6118   # 8118 is not using for now, but we may need it when extend kicker in the future
    volumes:
    - ../:/code       
    - ../cache/activity/ckb3-chain-data:/usr/local/ckb3-chain-data
    environment:
      # env of layer 1:
      CKB_CHAIN: dev
      BA_ARG: 0xb33248c08c55ed636d2f00d065d223ec1a0d333a
      BA_CODE_HASH: 0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8
      BA_HASH_TYPE: type
      BA_MESSAGE: 0x1234
      ENABLE_MULTI_CKB_NODES: ${ENABLE_MULTI_CKB_NODES}
    deploy:
      resources:
        limits:
          cpus: '0.5'

  godwoken:
    build: 
      context: layer2
      args: 
        DOCKER_IMAGE: "${DOCKER_MANUAL_BUILD_IMAGE_NAME}:${DOCKER_MANUAL_BUILD_IMAGE_TAG}"
    volumes:
    - ../:/code
    - ../cache/build/usr-local-cargo:/usr/local/cargo
    - ../cache/activity/ckb-cli-data:/root/.ckb-cli
    environment:
      GODWOKEN_MODE: fullmode
      FORCE_GODWOKEN_REDEPLOY: ${FORCE_GODWOKEN_REDEPLOY}
    command: bash /code/docker/layer2/entrypoint.sh
    ports:
      - 8119:8119
      - 8120:8120
    depends_on:
      - ckb
      - postgres
      - indexer
    
  godwoken-readonly:
    profiles: ["gw_readonly_node"]
    build: 
      context: layer2
      args: 
        DOCKER_IMAGE: "${DOCKER_MANUAL_BUILD_IMAGE_NAME}:${DOCKER_MANUAL_BUILD_IMAGE_TAG}"
    volumes:
    - ../:/code
    environment:
      GODWOKEN_MODE: readonly
    command: bash /code/docker/layer2/readonly/entrypoint.sh
    ports:
      - 8219:8219
    depends_on:
      - ckb
      - postgres
      - indexer
      - godwoken
      
  polyjuice:
    build:
      context: polyjuice 
      args: 
        DOCKER_PREBUILD_IMAGE: "${DOCKER_POLYMAN_PREBUILD_IMAGE_NAME}:${DOCKER_POLYMAN_PREBUILD_IMAGE_TAG}"
    volumes:
      - ../:/code
      - ../cache/activity/polyjuice:/usr/local/polyman
    environment: 
      MANUAL_BUILD_POLYMAN: ${MANUAL_BUILD_POLYMAN}
    command: bash /code/docker/polyjuice/entrypoint.sh 
    ports:
      - 6101:6101
      - 6100:6100
    depends_on:
      - ckb
      - postgres
    
  call-polyman:
    build:
      context: call-polyman
      args: 
        DOCKER_PREBUILD_IMAGE: "${DOCKER_POLYMAN_PREBUILD_IMAGE_NAME}:${DOCKER_POLYMAN_PREBUILD_IMAGE_TAG}"
    volumes:
      - ../:/code
      - ../cache/activity/call-polyman:/usr/local/polyman/call-polyman
    environment: 
      MANUAL_BUILD_POLYMAN: ${MANUAL_BUILD_POLYMAN}
    command: bash /code/docker/call-polyman/entrypoint.sh 
    ports:
      - 6102:6102
    depends_on:
      - ckb
      - postgres 

  web3:
    build:
      context: web3
      args: 
        DOCKER_PREBUILD_IMAGE: "${DOCKER_WEB3_PREBUILD_IMAGE_NAME}:${DOCKER_WEB3_PREBUILD_IMAGE_TAG}"
    volumes: 
    - ../:/code # the manual-build resource all stays in /code dir
    environment: 
      MANUAL_BUILD_WEB3: ${MANUAL_BUILD_WEB3}
      PORT: 8024
    command: bash /code/docker/web3/entrypoint.sh
    ports:
      - 8024:8024
    depends_on: 
      - redis
      - postgres
      - godwoken

  web3-indexer:
    build:
      context: web3/indexer
      args: 
        DOCKER_PREBUILD_IMAGE: "${DOCKER_WEB3_PREBUILD_IMAGE_NAME}:${DOCKER_WEB3_PREBUILD_IMAGE_TAG}"
    volumes: 
    - ../:/code # the manual-build resource all stays in /code dir
    environment: 
      MANUAL_BUILD_WEB3: ${MANUAL_BUILD_WEB3}
    command: bash /code/docker/web3/indexer/entrypoint.sh
    depends_on: 
      - redis
      - postgres
      - godwoken
      - web3
  
  zookeeper:
    profiles: ["gw_readonly_node"]
    image: zookeeper 
    restart: always
    hostname: zookeeper
    environment:
      ZOO_MY_ID: 1
    ports:
      - 2181:2181
    container_name: zookeeper

  kafka:
    profiles: ["gw_readonly_node"]
    image: "${KAFKA_PREBUILD_IMAGE_NAME}:${KAFKA_PREBUILD_IMAGE_TAG}" 
    volumes: 
    - ../:/code
    ports:
      - 9092:9092
    depends_on:
      - zookeeper
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    container_name: kafka
 
